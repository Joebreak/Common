plugins {
	id 'org.springframework.boot' version '2.0.3.RELEASE'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

archivesBaseName = 'metadata'
sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'

applicationName = "${archivesBaseName}"
mainClassName = 'org.joe.VideoTest'

jar {
	enabled = true
	    manifest {
        attributes 'Main-Class': 'org.joe.VideoTest'
    }
}

repositories {
	maven {
	   url 'https://artifact.aspose.com/repo/'
	}
	mavenCentral()
}

configurations {
	testCompile.extendsFrom compileOnly
	compile.exclude module: 'spring-boot-starter-tomcat'
	compile.exclude module: 'spring-boot-starter-logging'
	compile.exclude module: 'websocket-server'
	compile.exclude module: 'javax-websocket-server-impl'
}

dependencies {
	compile (
		// spring
		'org.springframework.boot:spring-boot-starter-web:2.0.3.RELEASE',
		'org.springframework.boot:spring-boot-starter-jetty:2.0.3.RELEASE',
		// logger
		'org.springframework.boot:spring-boot-starter-log4j2:2.0.3.RELEASE',
		'com.lmax:disruptor:3.4.2',
		//commons
		'commons-io:commons-io:2.6',
		//utils -json
		'org.codehaus.jackson:jackson-mapper-asl:1.9.0',
		// htmlcompressor
		'com.googlecode.htmlcompressor:htmlcompressor:1.5.2',
		  // apache poi for excel, word documents
        'org.apache.poi:poi:4.1.0',
        'org.apache.poi:poi-ooxml:4.1.0',
		// others
		'com.squareup.okhttp3:okhttp:3.10.0'
	)
}

eclipse {
	jdt {
		if(file('.settings').exists()){
		   File ef = file('.settings/org.eclipse.core.resources.prefs')
		   ef.write('eclipse.preferences.version=1\nencoding/<project>=UTF-8')
           File lf =  file('.settings/org.eclipse.core.runtime.prefs')
		   lf.write('eclipse.preferences.version=1\nline.separator=\\n')			   
		}
	}
}

task wrapper(type: Wrapper){
  gradleVersion = '3.5.1'
}

tasks.withType(Test) {
	ignoreFailures = true
}

applicationDistribution.from('tools') {
    into 'tools'
}

applicationDistribution.from(['start.bat']) {
    into ''
}
tasks.withType(Tar){
	compression = Compression.GZIP
}
